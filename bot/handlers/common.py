import re

import telebot
from telebot import types

from converters.converter import StringConverter
from dictionaries.help import user_helps
from dictionaries.user_data import user_data, USER_DATA_LENGTH
from http_client.http_client import HttpClient
from validators.validator import Validator

users = {}

requests = [{'id': x, 'type': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ', 'description': 'd', 'photos': None} for x in range(100)]

remove_keyboard = types.ReplyKeyboardRemove(selective=False)


def handle_start(message, bot):
    user_id = str(message.chat.id)
    bot.send_message(user_id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {last_name} {first_name}! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –°–æ–≤–∫–æ–º–±–∞–Ω–∫ Digital‚ò∫Ô∏è\n'
                              '–Ø –ø–æ–º–æ–≥—É –í–∞–º –±—ã—Å—Ç—Ä–æ –∏ –ª–µ–≥–∫–æ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –æ—Å–º–æ—Ç—Ä —Å—Ç—Ä–∞—Ö—É–µ–º–æ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞.'.format(
        first_name=(message.from_user.first_name if message.from_user.first_name else ''),
        last_name=(message.from_user.last_name if message.from_user.last_name else '')))

    id = str(1265630862)
    user = HttpClient.get('get_user', user_id)
    if user['data'] and user_id != id:
        bot.send_message(user_id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –°–æ–≤–∫–æ–º–±–∞–Ω–∫ Digital,'
                                  ' {name}!'
                                  '\n–†–∞–¥—ã –í–∞—Å –≤–∏–¥–µ—Ç—å —Å–Ω–æ–≤–∞!‚ò∫Ô∏è'.format(name=user['data']['name']))
        handle_menu(message, bot)
    else:
        markup = types.InlineKeyboardMarkup()
        registration = types.InlineKeyboardButton(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data='handle_registration')
        markup.add(registration)
        bot.send_message(user_id, '–£—Ö! –í—ã –Ω–æ–≤–∏—á–æ–∫! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é‚ò∫Ô∏è', reply_markup=markup)


def handle_registration(call, bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ. –ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""

    user_id = str(call.message.chat.id)

    if user_id not in users:
        users[user_id] = {}

    initial_data_step = 0

    bot.send_message(user_id, f"–í–≤–µ–¥–∏—Ç–µ {user_data[initial_data_step]['value']}:", reply_markup=remove_keyboard)
    bot.register_next_step_handler(call.message, get_text_user_data, initial_data_step, bot)


def approve_callback_registration(call, bot):
    mode = call.data.split('_')[1]
    user_id = str(call.message.chat.id)
    if mode == "yes":
        try:
            user = users[str(call.message.chat.id)]
            user['telegram_id'] = user_id
            request = HttpClient.post('register', str(call.message.chat.id), json=user)
            bot.send_message(call.message.chat.id,
                             "–û—Ç–ª–∏—á–Ω–æ! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Ä–∞–±–æ—Ç–µ!‚ò∫Ô∏è")
            del users[user_id]
            users[user_id] = {}
        except Exception as e:
            print(e)
        handle_menu(call.message, bot)
    elif mode == "no":
        bot.send_message(call.message.chat.id, '–û–∫–µ–π! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑‚ò∫Ô∏è')
        handle_registration(call, bot)


def handle_menu(message, bot):
    user_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    if False:
        markup.add("–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫", "–°–ø—Ä–∞–≤–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
    else:
        markup.add("–ü–æ–¥–∞—á–∞ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏", "–°–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        markup.add("–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫", "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–æ–∫")
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


def get_text_user_data(message: types.Message, type_id: int, bot):
    """–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    user_id = str(message.chat.id)

    data = StringConverter.strip_str(message.text)
    is_digit = Validator.is_digit_in_str(data)

    if not is_digit:
        users[user_id][user_data[type_id]['type']] = StringConverter.capitalize_str_from_lower_case(data)
        bot.send_message(message.from_user.id, '–°—É–ø–µ—Ä, –ø—Ä–∏–Ω—è—Ç–æ!')
        if type_id == USER_DATA_LENGTH - 1:
            keyboard = types.InlineKeyboardMarkup()
            key_yes = types.InlineKeyboardButton(text='–í–µ—Ä–Ω–æ', callback_data='registration_yes')
            key_no = types.InlineKeyboardButton(text='–ò—Å–ø—Ä–∞–≤–∏—Ç—å', callback_data='registration_no')
            keyboard.row(key_yes, key_no)
            user = users[user_id]
            text = f'___–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö___\n\n–§–∞–º–∏–ª–∏—è: {user["surname"]}\n–ò–º—è: {user["name"]}\n–û—Ç—á–µ—Å—Ç–≤–æ: {user["patronymic"]}'
            bot.send_message(message.from_user.id, text, reply_markup=keyboard, parse_mode='Markdown')
        else:
            bot.send_message(message.from_user.id, f"–í–≤–µ–¥–∏—Ç–µ {user_data[type_id + 1]['value']}:")
            bot.register_next_step_handler(message, get_text_user_data, type_id + 1, bot)
    else:
        bot.send_message(message.from_user.id,
                         f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ {user_data[type_id]["value"]} —Å–Ω–æ–≤–∞üò¢')
        bot.register_next_step_handler(message, get_text_user_data, type_id, bot)


def handle_help(message, bot):
    user_id = message.chat.id
    bot.send_message(user_id, "–î–æ—Å—Ç—É–ø–Ω—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–¥–µ–ª–æ–≤ —Å–ø—Ä–∞–≤–∫–∏üòå", reply_markup=remove_keyboard)
    user_id = message.chat.id
    keyboard = types.InlineKeyboardMarkup()
    # –¢—É—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for help in user_helps.keys():
        hp = types.InlineKeyboardButton(text=user_helps[help]['title'], parse_mode='Markdown',
                                        callback_data=f'helpuser_{help}')
        keyboard.add(hp)
    bot.send_message(user_id, "*–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:*", reply_markup=keyboard, parse_mode='Markdown')


def handle_help_button_pressed(call, bot):
    """
    general_photo_requirements_description = user_helps[GENERAL_PHOTO_REQUIREMENTS]["description"]
    help_category = call.data.split('_')[1]
    information = (f'{user_helps[help_category][HELP_TITLE_CATEGORY]}'
                   f'\n\n{user_helps[help_category][HELP_DESCRIPTION_CATEGORY]}'
                   f'{general_photo_requirements_description if help_category != GENERAL_PHOTO_REQUIREMENTS else ""}')
    bot.send_message(call.message.chat.id, information, parse_mode="Markdown")"""

    """
    user_id = message.chat.id
    bot.send_message(user_id, "–î–æ—Å—Ç—É–ø–Ω—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–¥–µ–ª–æ–≤ —Å–ø—Ä–∞–≤–∫–∏üòå")
    user_id = message.chat.id
    keyboard = types.InlineKeyboardMarkup()
    for help in helps_moderator.keys():
        hp = types.InlineKeyboardButton(text=f"{helps_moderator[help]['title']}", callback_data=f'help_{help}')
        keyboard.add(hp)
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=keyboard)"""
    pass


def handle_page_inline_button_pressed(call, bot):
    """user_id = str(call.message.chat.id)
    if call.data == 'prev_page':
        # current_page -= 1
        send_history_page(user_id, bot)
    elif call.data == 'next_page':
        # current_page += 1
        send_history_page(user_id, bot)"""


def add_file(message, bot):
    print("YAY")
    file_name = message.document.file_name
    file_info = bot.get_file(message.document.file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    # with open('documents' + file_name, 'wb') as new_file:
    # new_file.write(downloaded_file)


def command_default(m, bot):
    bot.send_message(m.chat.id, "–Ø –Ω–µ –∑–Ω–∞—é –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ãüò¢\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é...")


def register_handlers_common(bot):
    bot.register_message_handler(handle_start, commands=['start'], pass_bot=True)
    bot.register_message_handler(handle_help, func=lambda
        message: message.text == "–°–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" or message.text == "–°–ø—Ä–∞–≤–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", pass_bot=True)
    bot.register_message_handler(handle_menu, commands=['menu'], pass_bot=True)
    bot.register_message_handler(add_file, content_types=['document', 'photo', 'audio', 'video', 'voice'],
                                 pass_bot=True)
    bot.register_message_handler(command_default, content_types=['text'], pass_bot=True)
    bot.register_callback_query_handler(handle_help_button_pressed,
                                        func=lambda call: re.search(r'^help', call.data), pass_bot=True)
    bot.register_callback_query_handler(handle_page_inline_button_pressed,
                                        func=lambda call: re.search(r'page$', call.data), pass_bot=True)
    bot.register_callback_query_handler(handle_registration, func=lambda call: call.data == 'handle_registration',
                                        pass_bot=True)
    bot.register_callback_query_handler(approve_callback_registration,
                                        func=lambda call: re.search(r'^registration', call.data), pass_bot=True)
